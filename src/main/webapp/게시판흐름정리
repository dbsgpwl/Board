* FrontController : 모든 url 요청을 받음(*.do url을 받음)
* url주소 확인하는 이유: 해당 url에 대응하는 subcontroller를 꺼내 실행하기 위해 (subcontoller를 찾기 위한 Key값)


*.do url 요청 -> Front에서 모든 url 요청 받음 (url+서브 객체주소 저장) 
-> Url 정보와 서브 컨트롤러 객체를 저장하는 컬렉션(HashMap)생성

-> 1. init ()에 저장 및 셋업
	 : Sub 객체 주소가 list에 저장 - MemberJoin.do(url), new MemberJoinController() 저장
 
-> 2. service () URL 주소 확인 후 SubController의 execute 실행
	: req.getRequestURL() -> 각 SubController url주소 확인 
	: list.get(url) -> SubController의 execute 로직 실행
	
==========================================================================

-----------------
회원가입(Join.jsp)
-----------------
0. FrontCotroller 모든 *.do 를 수신 web.xml 설정 완료(서버 재부팅)
	<!-- FrontController URL Mapping -->
    <servlet>
      <servlet-name>FC</servlet-name>
      <servlet-class>com.korea.controller.FrontController</servlet-class>
   </servlet>
   <servlet-mapping>
      <servlet-name>FC</servlet-name>
      <url-pattern>*.do</url-pattern>
   </servlet-mapping>

1. 외부 URL Request 요청 (사용자 요청)
2. FrontController의 init() 초기화
2. FrontController의 Service 함수 URl 확인 및 가져오기
3. URL에 해당하는 SubController 객체 주소(Map) 확인 및 꺼내기
4. SubController의 execute를 실행
	1) 파라미터 받기(req, resp)
	2)  입력값 검증(JS대체 가능)
	3) 서비스 실행
 	service -> dao -> dto -> DB처리 
	4) View로 이동(기본 최상위Path)
		포워드/리다이렉트

============================================================================

-----------------
로그인/로그아웃(Login.do, Logout.do)
-----------------
1 FrontCotroller에서 "/Login.do" , "/LoginController"를 init 호출 시 저장
2 LoginController
 	1) 파라미터
	2) 입력값 확인
	3) 서비스 실행
		MemberSerivce -> dao.select(email)
	4) 패스워드 일치확인
		-세션 객체에 grade 저장
		-세션 객체에 email 저장
	5) View로 이동
		main.jsp로 redirect
		
		
============================================================================

-----------------
회원 정보 수정
-----------------
1 FrontController "/MemberUpdate.do",MemberUpdateController 추가
2 MemberUpdateController 
	flag==null
		/WEB-INF/member/password.jsp
	flag!=null
		1 파라미터 받기(수정예정인 회원정보)
		2 패스워드 체크
		3 패스워드가 일치하면 dto 수정 내용담는다
		4 service.MemberUpdate(dto) -> dao.update ->DB 수정
		5 req.setAttribute("dto",dto)
		6 /WEB-INF/member/myinfo.jsp
		

-----------------
필터 추가
-----------------
[참고]
https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=adamdoha&logNo=221665607853

============================================================================

-----------------
필터 설정하기
-----------------

1)  Web.xml 에 filter-url mapping 하기
		
		<!-- Filter URL Mapping -->
	<filter>
		<filter-name>authority</filter-name>
		<filter-class>com.korea.filter.authfilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>authority</filter-name>
		<url-pattern>*.do</url-pattern> //특정 페이지만 필터처리할 수도 있음 
	</filter-mapping>
		

2) 패키지생성, 클래스생성
	- com.korea.filter 패키지 생성
	- com.korea.filter.authfilter 클래스 생성
	- authfilter implements filter
	- doFilter()를 강제 재정의 (ServletRequest req ---)
	
	- 요청 전 (Filter->Controller) : Filter에 있는 코드를 적용 시킨 뒤, Controller로 이동
	- chain.doFilter(req,resp) //doFilter를 기준으로 리퀘스트 
	- 요청 후 (Controller->Filter) : Controller 코드 적용 뒤, Filter로 다시 이동
	
-----------------
페이지별 권한 부여
-----------------

0) URL 별로 Grade 저장
 	- init() -> Map에 URL과 Grade 저장
 		0 : 게스트 1 : 일반  2 : 관리자
 	
1) 세션 usergrade 가져오기
2) URL pagegrade 가져오기
3) 권한 설정

============================================================================
 --------------------------
1 db 
--------------------------
--DB생성
drop table tbl_board;
create table tbl_board
(
    no int primary key,
    title varchar2(50) not null,
    content varchar2(255) not null,
    writer varchar2(100) not null,
    regdate date,
    pwd varchar(255) not null,
    count int,
    ip varchar(50),
    filename varchar(100),
    filesize varchar(100)
);
desc tbl_board;

--500 Post

DECLARE
NUM1 NUMBER :=1;
BEGIN
    LOOP
     
     insert into tbl_board values
     (NUM1,'Title'||NUM1,'Content'||NUM1,'Writer'||NUM1,sysdate,'1234',0,'127.0.0.1','0','0');
     
    NUM1 := NUM1+1; 
    EXIT WHEN NUM1 >500; --NUM1이 10보다 크면 LOOP종료
    END LOOP;
END;

select * from tbl_board;




--------------------------
2 게시물받기
--------------------------
1) 게시물 받기 기본- select(int start,int end)
SQL문
select rn, no, title, content, writer, regdate,pwd,count,ip,filename,filesize
from
(
    select /*+ INDEX_DESC (tbl_board PK_NO) */
    rownum rn, no, title, content, writer, regdate,pwd,count,ip,filename,filesize
    from tbl_board where rownum<=10
)
where rn>=1 
 
============================================================================

--------------------------
3 총 페이지 수 받기
--------------------------
DAO - select count(*) from tbl_board;
Service
Controller (req.setAttribute())
view

list.jsp
-전체게시물건수 받기
-전체페이지 계산

--------------------------
4 페이지네이션 
--------------------------
-표시할 페이지 블럭 수
-전체 블럭 수 (전체 페이지 수)


-블럭내 페이지 이동 
1) 페이지번호 클릭 -> paging(페이지번호) 호출
2) paging함수 받은페이지번호를 이용해서 start,end 계산
3) form(readFrm)에 start,end,nowPage를 저장
4) 폼전송(/Board/list.do)
5) BoardListController 
	-파라미터 확인(start,end,pageNum)
	-서비스(start,end)
	-start,end에 의해 검색된 게시물들을 list.jsp 전달 


-블럭간 이동
1) 이전/이후 버튼 클릭
2) block(이전or이후 블럭번호) 함수 호출
   - 이동될 블럭에서 표시할 페이지 번호 구하기, readFrm폼에 저장 
   - start값 readFrm폼에 저장 
   - end 값 readFrm폼에 저장 
   - nowPage값 readFrm폼에 저장 
3) 폼전송(/Board/list.do)
4) BoardListController 
	-파라미터 확인(start,end,pageNum)
	-서비스(start,end)
	-start,end에 의해 검색된 게시물들을 list.jsp 전달 
	
============================================================================

